import pandas as pd
import os
import hashlib

tests_by_organ_system =  {
    'Сердечно-сосудистая система': {
        'common': ['ЭКГ', 'ЭхоКГ', 'Суточное мониторирование ЭКГ', 'Суточное мониторирование АД'],
        'specific': {
            'Кардиолог': ['Коронароангиография', 'Стресс-эхокардиография', 'Велоэргометрия'],
            'Флеболог': ['УЗДГ вен нижних конечностей', 'Флебография', 'Дуплексное сканирование вен']
        }
    },
    'Дыхательная система': {
        'common': ['Рентген грудной клетки', 'Спирометрия', 'КТ органов грудной клетки'],
        'specific': {
            'Пульмонолог': ['Бронхоскопия', 'Исследование функции внешнего дыхания', 'Плевральная пункция'],
            'Аллерголог': ['Аллергопробы', 'Иммуноглобулин E', 'Спирометрия с бронхолитиком']
        }
    },
    'Пищеварительная система': {
        'common': ['УЗИ брюшной полости', 'ФГДС', 'Колоноскопия', 'Биохимический анализ крови'],
        'specific': {
            'Гастроэнтеролог': ['pH-метрия', 'Дыхательный тест на хеликобактер', 'Эластография печени'],
            'Проктолог': ['Ректороманоскопия', 'Аноскопия', 'Ирригоскопия'],
            'Хирург': ['Диагностическая лапароскопия', 'ЭРХПГ']
        }
    },
    'Нервная система': {
        'common': ['МРТ головного мозга', 'ЭЭГ', 'УЗДГ сосудов головы и шеи'],
        'specific': {
            'Невролог': ['Электронейромиография', 'Вызванные потенциалы', 'Люмбальная пункция'],
            'Нейрохирург': ['КТ головного мозга с контрастом', 'Ангиография сосудов мозга']
        }
    },
    'Опорно-двигательная система': {
        'common': ['Рентген суставов', 'МРТ позвоночника', 'Денситометрия'],
        'specific': {
            'Ортопед': ['Артроскопия', 'КТ суставов', 'УЗИ суставов'],
            'Ревматолог': ['Анализ на ревматоидный фактор', 'АЦЦП', 'С-реактивный белок'],
            'Травматолог': ['КТ костей', 'МРТ мягких тканей']
        }
    },
    'Мочеполовая система': {
        'common': ['УЗИ почек', 'УЗИ мочевого пузыря', 'Общий анализ мочи'],
        'specific': {
            'Уролог': ['Цистоскопия', 'Урофлоуметрия', 'Анализ секрета простаты'],
            'Нефролог': ['Проба Реберга', 'Суточный анализ мочи', 'Биопсия почки'],
            'Гинеколог': ['УЗИ малого таза', 'Кольпоскопия', 'Мазок на флору']
        }
    },
    'Эндокринная система': {
        'common': ['Анализ крови на гормоны', 'УЗИ щитовидной железы', 'Глюкоза крови'],
        'specific': {
            'Эндокринолог': ['Гликированный гемоглобин', 'Тест на толерантность к глюкозе', 'Кортизол'],
            'Диетолог': ['Биоимпедансометрия', 'Липидный профиль', 'Инсулин']
        }
    },
    'Кожа и придатки': {
        'common': ['Соскоб с кожи', 'Дерматоскопия', 'Общий анализ крови'],
        'specific': {
            'Дерматолог': ['Биопсия кожи', 'Посев на грибы', 'Аллергопатчи'],
            'Трихолог': ['Трихоскопия', 'Фототрихограмма', 'Анализ волос на микроэлементы'],
            'Подолог': ['Соскоб с ногтей', 'Микологический посев']
        }
    },
    'Органы чувств': {
        'common': ['Визометрия', 'Тонометрия', 'Аудиометрия'],
        'specific': {
            'Офтальмолог': ['ОКТ сетчатки', 'Периметрия', 'Биомикроскопия'],
            'Отоларинголог': ['Эндоскопия ЛОР-органов', 'Тимпанометрия', 'Вестибулометрия']
        }
    },
    'Иммунная система': {
        'common': ['Иммунограмма', 'Общий анализ крови', 'С-реактивный белок'],
        'specific': {
            'Иммунолог': ['Интерфероновый статус', 'Анализ на цитокины', 'Тест на фагоцитоз'],
            'Аллерголог': ['Иммуноглобулин E', 'Тест на специфические IgE', 'Кожные пробы']
        }
    },
    'Женская половая система': {
        'common': ['УЗИ малого таза', 'Мазок на цитологию', 'Анализ на половые гормоны'],
        'specific': {
            'Гинеколог': ['Гистероскопия', 'Кольпоскопия', 'Анализ на ИППП'],
            'Маммолог': ['Маммография', 'УЗИ молочных желез', 'Биопсия молочной железы']
        }
    },
    'Мужская половая система': {
        'common': ['УЗИ предстательной железы', 'Анализ секрета простаты', 'Спермограмма'],
        'specific': {
            'Уролог': ['ТРУЗИ', 'Анализ на ПСА', 'Биопсия простаты'],
            'Андролог': ['MAR-тест', 'Анализ фрагментации ДНК сперматозоидов', 'Гормональный профиль']
        }
    },
    'Кровь и кроветворная система': {
        'common': ['Общий анализ крови', 'Коагулограмма', 'Биохимический анализ крови'],
        'specific': {
            'Гематолог': ['Стернальная пункция', 'Трепанобиопсия', 'Проточная цитометрия'],
            'Трансфузиолог': ['Проба Кумбса', 'Определение группы крови и резус-фактора']
        }
    },
    'Психическая сфера': {
        'common': ['ЭЭГ', 'МРТ головного мозга', 'Общий анализ крови'],
        'specific': {
            'Психиатр': ['Психологическое тестирование', 'Электроэнцефалография', 'Токсикологический анализ'],
            'Психотерапевт': ['Проективные тесты', 'Опросники тревоги и депрессии']
        }
    },
    'Стоматологическая система': {
        'common': ['Ортопантомограмма', 'КТ челюстей', 'Бактериологический посев'],
        'specific': {
            'Стоматолог': ['Витальное окрашивание зубов', 'ЭОД', 'Пародонтальный индекс'],
            'Ортодонт': ['Телерентгенограмма', 'Анализ моделей челюстей']
        }
    },
    'Реабилитационная система': {
        'common': ['Функциональные пробы', 'ЭНМГ', 'Стабилометрия'],
        'specific': {
            'Физиотерапевт': ['Электромиография', 'Гониометрия', 'Тест мышечной силы'],
            'Реабилитолог': ['Анализ походки', 'Баланс-тест', 'Кардиопульмональный тест']
        }
    },
    'Сомнологическая система': {
        'common': ['Полисомнография', 'ЭЭГ ночного сна', 'Пульсоксиметрия'],
        'specific': {
            'Сомнолог': ['MSLT-тест', 'Респираторный мониторинг', 'Актиграфия']
        }
    },
    'Профессиональные заболевания': {
        'common': ['Спирометрия', 'Аудиометрия', 'Рентген органов грудной клетки'],
        'specific': {
            'Профпатолог': ['Анализ на тяжелые металлы', 'Пылевой анализ', 'Виброметрия']
        }
    },
    'Детские заболевания': {
        'common': ['Общий анализ крови', 'Общий анализ мочи', 'УЗИ органов брюшной полости'],
        'specific': {
            'Педиатр': ['Неонатальный скрининг', 'Анализ на дисбактериоз', 'Копрограмма'],
            'Неонатолог': ['Анализ крови новорожденного', 'Билирубин', 'Газовый состав крови']
        }
    },
    'Возрастные изменения': {
        'common': ['Денситометрия', 'Липидный профиль', 'Глюкоза крови'],
        'specific': {
            'Гериатр': ['Когнитивные тесты', 'Анализ на витамин D', 'Оценка функционального статуса']
        }
    },
    'Эстетические проблемы': {
        'common': ['Дерматоскопия', 'Фототипирование кожи', 'Анализ на гормоны'],
        'specific': {
            'Эстетический врач': ['Анализ состояния кожи', 'Тест на фотостарение', 'Оценка пропорций лица']
        }
    },
    'Нарушения питания': {
        'common': ['Биохимический анализ крови', 'Липидный профиль', 'Гормональный профиль'],
        'specific': {
            'Диетолог': ['Биоимпедансный анализ', 'Калориметрия', 'Анализ основного обмена']
        }
    }
}

organ_systems = {
'Сердечно-сосудистая система': {
'organs': ['сердце', 'кровеносные сосуды', 'артерии', 'вены', 'капилляры', 'аорта'],
'symptoms': [
    'боль в грудной клетке давящего характера',
    'ощущение перебоев в работе сердца',
    'учащенное сердцебиение в покое',
    'одышка при обычной физической нагрузке',
    'отеки на ногах к вечеру',
    'головокружение при смене положения тела',
    'повышение артериального давления',
    'снижение толерантности к физической нагрузке',
    'бледность кожных покровов',
    'похолодание конечностей'
        ]
    },
'Дыхательная система': {
'organs': ['легкие', 'бронхи', 'трахея', 'гортань', 'носоглотка', 'альвеолы'],
'symptoms': [
    'кашель с отделением мокроты',
    'сухой надсадный кашель',
    'одышка в покое',
    'боли в грудной клетке при дыхании',
    'хрипы в грудной клетке',
    'ночные приступы удушья',
    'кровохарканье',
    'повышение температуры тела с ознобом',
    'боль в горле',
    'заложенность носа'
        ]
    },
'Пищеварительная система': {
'organs': ['желудок', 'кишечник', 'печень', 'поджелудочная железа', 'желчный пузырь', 'пищевод'],
'symptoms': [
    'боли в животе спастического характера',
    'тошнота после приема пищи',
    'рвота съеденной пищей',
    'изжога после острой пищи',
    'вздутие живота',
    'нарушение стула (запоры/диарея)',
    'отрыжка воздухом',
    'снижение аппетита',
    'боль в правом подреберье',
    'желтушность кожных покровов'
        ]
    },
'Нервная система': {
'organs': ['головной мозг', 'спинной мозг', 'периферические нервы', 'мозжечок', 'ствол мозга'],
'symptoms': [
    'головная боль напряжения',
    'мигренозные боли с аурой',
    'головокружение системного характера',
    'онемение конечностей',
    'слабость в руках/ногах',
    'нарушение координации движений',
    'шум в ушах',
    'нарушение памяти',
    'тремор конечностей',
    'нарушение речи'
        ]
    },
'Опорно-двигательная система': {
'organs': ['кости', 'суставы', 'мышцы', 'связки', 'позвоночник', 'хрящи'],
'symptoms': [
    'боли в суставах при движении',
    'утренняя скованность в суставах',
    'боли в пояснице при нагрузке',
    'ограничение подвижности в суставах',
    'мышечные боли после физической нагрузки',
    'хруст в суставах при движении',
    'отечность суставов',
    'ночные боли в костях',
    'деформация суставов',
    'слабость в мышцах'
        ]
    },
'Мочеполовая система': {
'organs': ['почки', 'мочевой пузырь', 'мочеточники', 'уретра', 'надпочечники'],
'symptoms': [
    'боли в поясничной области',
    'нарушение мочеиспускания',
    'частые позывы к мочеиспусканию',
    'боли при мочеиспускании',
    'изменение цвета мочи',
    'отеки на лице по утрам',
    'боли внизу живота',
    'нарушение менструального цикла',
    'патологические выделения',
    'нарушение эрекции'
        ]
    },
'Эндокринная система': {
'organs': ['щитовидная железа', 'надпочечники', 'поджелудочная железа', 'гипофиз', 'гипоталамус'],
'symptoms': [
    'повышенная жажда',
    'учащенное мочеиспускание',
    'повышенный аппетит',
    'снижение массы тела',
    'повышенная потливость',
    'нарушение терморегуляции',
    'изменение настроения',
    'нарушение роста волос',
    'изменение тембра голоса',
    'нарушение менструального цикла'
        ]
    },
'Кожа и придатки': {
'organs': ['кожа', 'ногти', 'волосы', 'потовые железы', 'сальные железы'],
'symptoms': [
    'кожные высыпания',
    'зуд кожных покровов',
    'шелушение кожи',
    'изменение цвета кожных покровов',
    'появление новообразований',
    'выпадение волос',
    'ломкость ногтей',
    'повышенная потливость',
    'сухость кожи',
    'пигментация кожи'
        ]
    },
'Органы чувств': {
'organs': ['глаза', 'уши', 'нос', 'язык', 'вестибулярный аппарат'],
'symptoms': [
    'снижение остроты зрения',
    'боль в глазах',
    'покраснение глаз',
    'ощущение песка в глазах',
    'двоение в глазах',
    'слезотечение',
    'снижение слуха',
    'шум в ушах',
    'нарушение обоняния',
    'нарушение вкуса'
        ]
    },
'Иммунная система': {
'organs': ['лимфатические узлы', 'селезенка', 'костный мозг', 'тимус', 'миндалины'],
'symptoms': [
    'увеличение лимфатических узлов',
    'частые инфекционные заболевания',
    'аллергические реакции',
    'повышение температуры тела',
    'слабость и утомляемость',
    'ночная потливость',
    'снижение массы тела',
    'боли в костях',
    'склонность к кровотечениям',
    'длительное заживление ран'
        ]
    },
'Женская половая система': {
'organs': ['матка', 'яичники', 'влагалище', 'фаллопиевы трубы', 'молочные железы'],
'symptoms': [
    'нарушение менструального цикла',
    'боли внизу живота',
    'патологические выделения из влагалища',
    'болезненность молочных желез',
    'образование уплотнений в груди',
    'зуд в области половых органов',
    'боли при половом акте',
    'нарушение репродуктивной функции',
    'приливы жара',
    'сухость влагалища'
        ]
    },
'Мужская половая система': {
'organs': ['предстательная железа', 'яички', 'половой член', 'семенные пузырьки'],
'symptoms': [
    'нарушение мочеиспускания',
    'боли в промежности',
    'снижение либидо',
    'нарушение эрекции',
    'боли при эякуляции',
    'изменение качества спермы',
    'уплотнения в яичках',
    'боли в мошонке',
    'преждевременная эякуляция',
    'снижение фертильности'
        ]
    },
'Кровь и кроветворная система': {
'organs': ['кровь', 'костный мозг', 'селезенка', 'лимфатические узлы'],
'symptoms': [
    'бледность кожных покровов',
    'повышенная утомляемость',
    'одышка при нагрузке',
    'учащенное сердцебиение',
    'склонность к кровотечениям',
    'образование синяков',
    'увеличение лимфатических узлов',
    'ночная потливость',
    'повышение температуры тела',
    'потеря веса'
        ]
    },
'Лимфатическая система': {
'organs': ['лимфатические сосуды', 'лимфатические узлы', 'миндалины', 'аденоиды'],
'symptoms': [
    'увеличение лимфатических узлов',
    'отеки конечностей',
    'боли в области лимфоузлов',
    'повышение температуры тела',
    'слабость и недомогание',
    'ночная потливость',
    'потеря веса',
    'частые инфекции',
    'покраснение кожи над лимфоузлами',
    'ощущение тяжести в конечностях'
        ]
    },
'Психическая сфера': {
'organs': ['психика', 'эмоциональная сфера', 'когнитивные функции'],
'symptoms': [
    'снижение настроения',
    'повышенная тревожность',
    'нарушение сна',
    'апатия и безразличие',
    'раздражительность',
    'панические атаки',
    'навязчивые мысли',
    'снижение концентрации внимания',
    'нарушение памяти',
    'изменение поведения'
        ]
    },
'Стоматологическая система': {
'organs': ['зубы', 'десны', 'язык', 'слизистая полости рта', 'челюсти'],
'symptoms': [
    'зубная боль',
    'кровоточивость десен',
    'повышенная чувствительность зубов',
    'неприятный запах изо рта',
    'образование язвочек во рту',
    'подвижность зубов',
    'боль при жевании',
    'отечность десен',
    'изменение цвета зубов',
    'боль в височно-нижнечелюстном суставе'
        ]
    },
'Реабилитационная система': {
'organs': ['опорно-двигательный аппарат', 'нервная система', 'послеоперационные состояния'],
'symptoms': [
    'ограничение подвижности суставов',
    'мышечная слабость',
    'нарушение координации движений',
    'боли при движении',
    'снижение мышечной силы',
    'нарушение походки',
    'быстрая утомляемость',
    'нарушение баланса',
    'снижение выносливости',
    'послеоперационные боли'
        ]
    },
'Сомнологическая система': {
'organs': ['циркадные ритмы', 'структура сна', 'дыхание во сне'],
'symptoms': [
    'нарушение засыпания',
    'частые пробуждения ночью',
    'дневная сонливость',
    'храп во сне',
    'остановки дыхания во сне',
    'беспокойный сон',
    'кошмарные сновидения',
    'раннее пробуждение',
    'ощущение невыспанности',
    'снижение качества сна'
        ]
    },
'Профессиональные заболевания': {
'organs': ['легкие', 'кожа', 'опорно-двигательный аппарат', 'нервная система'],
'symptoms': [
    'хронический кашель',
    'одышка при нагрузке',
    'кожные высыпания',
    'боли в суставах',
    'мышечная слабость',
    'нарушение слуха',
    'головные боли',
    'повышенная утомляемость',
    'нарушение координации',
    'снижение концентрации'
        ]
    },
'Детские заболевания': {
'organs': ['растущий организм', 'иммунная система', 'нервная система'],
'symptoms': [
    'повышение температуры тела',
    'кашель и насморк',
    'сыпь на коже',
    'снижение аппетита',
    'нарушение сна',
    'повышенная возбудимость',
    'отставание в развитии',
    'частые простудные заболевания',
    'боли в животе',
    'нарушение стула'
        ]
    },
'Возрастные изменения': {
'organs': ['все системы организма', 'когнитивные функции', 'опорно-двигательный аппарат'],
'symptoms': [
    'снижение памяти',
    'ухудшение зрения',
    'нарушение слуха',
    'боли в суставах',
    'снижение мышечной силы',
    'нарушение равновесия',
    'повышенная утомляемость',
    'нарушение мочеиспускания',
    'снижение плотности костей',
    'ухудшение качества кожи'
        ]
    },
'Эстетические проблемы': {
'organs': ['кожа', 'волосы', 'ногти', 'подкожная клетчатка'],
'symptoms': [
    'морщины на коже',
    'пигментные пятна',
    'сосудистые звездочки',
    'целлюлит',
    'выпадение волос',
    'ломкость ногтей',
    'сухость кожи',
    'избыточный вес',
    'растяжки на коже',
    'возрастные изменения лица'
        ]
    },
'Нарушения питания': {
'organs': ['желудочно-кишечный тракт', 'обмен веществ', 'эндокринная система'],
'symptoms': [
    'избыточный вес',
    'недостаточный вес',
    'нарушение аппетита',
    'тяга к определенным продуктам',
    'нарушение пищевого поведения',
    'вздутие живота после еды',
    'изжога и отрыжка',
    'запоры или диарея',
    'отеки',
    'слабость и утомляемость'
        ]
    }
}

def decompose_bank_card(df: pd.DataFrame, card_column: str, element: str) -> pd.DataFrame:
    payment_systems = {
        '4': 'VISA',
        '5': 'MasterCard',
        '2': 'Mir',
    }
    banks = {
        '04': 'Sberbank',
        '16': 'Tinkoff',
        '41': 'VTB',
        '35': 'Alfa-Bank',
        '22': 'Gazprombank',
        '36': 'Raiffeisenbank',
        '45': 'Otkritie',
        '20': 'Promsvyazbank',
        '43': 'Rosbank',
    }
    df = df.copy()
    if element == "Платежная система":
        df[card_column] = df[card_column].astype(str)
        df['Платежная система'] = df[card_column].str[:1].apply(lambda x: payment_systems[str(x)])
        df = delete_columns(df, card_column)
    elif element == "Банк":
        df[card_column] = df[card_column].astype(str)
        df['Банк'] = df[card_column].str[1:3].apply(lambda x: banks[str(x)])
        df = delete_columns(df, card_column)
    return df

def decompose_phone_numbers(df: pd.DataFrame, phone_column: str, element: str) -> pd.DataFrame:
    df = df.copy()
    if element == "Код страны":
        df['Код страны'] = df[phone_column].str[:2]
        df = delete_columns(df, phone_column)
    elif element == "Мобильный оператор":
        df['Мобильный оператор'] = df[phone_column].str[2:5]
        df = delete_columns(df, phone_column)
    elif element == "Номер":
        df['Номер'] = df[phone_column].str[5:]
        df = delete_columns(df, phone_column)
    return df


def generalize_doctors_strong(df: pd.DataFrame, doctor_column: str) -> pd.DataFrame:
    """
    Сильное обобщение врачей в крупные категории.
    """
    doctor_to_group = {
        'Дерматолог': 'Другое',
        'Кардиолог': 'Системные специалисты',
        'Невролог': 'Системные специалисты',
        'Гематолог': 'Другое',
        'Диетолог': 'Другое',
        'Гинеколог': 'Реабилитация и общие',
        'Реабилитолог': 'Реабилитация и общие',
        'Ортопед': 'Реабилитация и общие',
        'Гастроэнтеролог': 'Системные специалисты',
        'Отоларинголог': 'Системные специалисты',
        'Андролог': 'Реабилитация и общие',
        'Пульмонолог': 'Системные специалисты',
        'Эндокринолог': 'Системные специалисты',
        'Уролог': 'Системные специалисты',
        'Стоматолог': 'Системные специалисты',
        'Терапевт': 'Реабилитация и общие',
        'Аллерголог': 'Другое',
        'Педиатр': 'Другое',
        'Психотерапевт': 'Реабилитация и общие',
        'Иммунолог': 'Другое',
        'Нефролог': 'Другое'
    }

    df = df.copy()
    df[doctor_column] = df[doctor_column].map(doctor_to_group).fillna('Не определено')
    return df




def categorize_costs_quantile(df, column_name, num_bins):
    """
    Разбивает столбец со стоимостью на диапазоны с примерно равным количеством записей,
    заменяет старый столбец на новый с подписями диапазонов.
    
    :param df: pandas DataFrame
    :param column_name: имя столбца с ценами
    :param num_bins: количество диапазонов
    :return: DataFrame с обновленным столбцом
    """
    # Разбиваем на квантильные диапазоны
    bins = pd.qcut(df[column_name], q=num_bins)
    
    # Формируем читаемые подписи для диапазонов
    labels = [f"{int(interval.left)}-{int(interval.right)}" for interval in bins.cat.categories]
    
    # Заменяем столбец на новый с подписями
    df[column_name] = pd.qcut(df[column_name], q=num_bins, labels=labels)
    
    return df



def combine_fio_to_uid(df: pd.DataFrame, surname_col: str, name_col: str, patronymic_col: str, new_col: str = "UID") -> pd.DataFrame:
    """
    Объединяет три столбца ФИО в один уникальный идентификатор с помощью хеширования.
    
    :param df: DataFrame
    :param surname_col: имя столбца с фамилией
    :param name_col: имя столбца с именем
    :param patronymic_col: имя столбца с отчеством
    :param new_col: имя нового столбца с UID
    :return: DataFrame с новым столбцом и удалёнными исходными ФИО
    """
    
    def hash_fio(row):
        fio_str = f"{row[surname_col]} {row[name_col]} {row[patronymic_col]}"
        return hashlib.md5(fio_str.encode('utf-8')).hexdigest()  # MD5 хеш, можно заменить на SHA256
    
    df[new_col] = df.apply(hash_fio, axis=1)
    
    # Удаляем исходные столбцы
    df = df.drop(columns=[surname_col, name_col, patronymic_col])
    
    return df



def generalize_symptoms(df: pd.DataFrame, symptoms_column: str) -> pd.DataFrame:
    df = df.copy()
    
    return df


def generalize_snils(df: pd.DataFrame, snils_column: str) -> pd.DataFrame:
    df = df.copy()
    df[snils_column] = df[snils_column].apply(lambda x: 'Гражданин РФ' if x not in ['Гражданин РБ', 'Гражданин РК'] else x)
    return df



def mask_passport_data(df: pd.DataFrame, passport_column: str, length: int) -> pd.DataFrame:
    df = df.copy()
    df[passport_column] = df[passport_column].apply(lambda x: x[:length] + '***' if len(x) > length else x)
    return df

def decompose_dates(df: pd.DataFrame, date_column: str, element: str) -> pd.DataFrame:
    # example: '2020-02-09T12:30+03:00' -> '2020', '2020-02', '2020-02-09'
    df = df.copy()
    df[date_column] = pd.to_datetime(df[date_column])
    if element == "Год":
        df[date_column] = df[date_column].dt.to_period("Y")
    elif element == "Квартал":
        df[date_column] = df[date_column].dt.to_period("Q")
    elif element == "Месяц":
        df[date_column] = df[date_column].dt.to_period("M")
    elif element == "День":
        df[date_column] = df[date_column].dt.to_period("D")
    else:
        raise ValueError(f"Неизвестный элемент: {element}")
    return df

def save_current_state(data: pd.DataFrame, file_path: str):
    if os.path.exists(file_path):
        os.remove(file_path)

    with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
        data.to_excel(writer, index=False)
        worksheet = writer.sheets['Sheet1']
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter

            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except Exception:
                    pass

            adjusted_width = (max_length + 2) * 1.1
            worksheet.column_dimensions[column_letter].width = adjusted_width

def calculate_k_anonymity_with_stats(df: pd.DataFrame, quasi_identifiers: list[str]) -> dict:
    missing = [col for col in quasi_identifiers if col not in df.columns]
    if missing:
        raise ValueError(f"Отсутствуют колонки: {missing}") 
    group_sizes = df.groupby(quasi_identifiers, observed=True).size() 
    k = int(group_sizes.min())
    frequency_distribution = group_sizes.value_counts().sort_index()
    result = {
        "k_anonymity": k,
        "num_groups": len(group_sizes),
        "frequency_distribution": frequency_distribution.to_dict()
    }
    return result

def calculate_k_anonymity_from_df(df: pd.DataFrame, quasi_identifiers: list[str]) -> int:
    """
    Рассчитывает k-анонимность на основе уже загруженного DataFrame.
    Безопасно работает с категориальными столбцами и учитывает только реально встречающиеся группы.

    :param df: pandas DataFrame
    :param quasi_identifiers: список квази-идентификаторов
    :return: минимальный размер группы (k-анонимность)
    """
    # Проверка наличия всех столбцов
    missing = [col for col in quasi_identifiers if col not in df.columns]
    if missing:
        raise ValueError(f"Отсутствуют колонки: {missing}")

    if df.empty:
        return 0  # пустой DataFrame → k=0

    # Приводим категориальные столбцы к строковому типу, чтобы не было "пустых категорий"
    for col in quasi_identifiers:
        if pd.api.types.is_categorical_dtype(df[col]):
            df[col] = df[col].astype(str)

    # Группировка по квази-идентификаторам, учитываем только реально встречающиеся комбинации
    group_sizes = df.groupby(quasi_identifiers, observed=True).size()

    if group_sizes.empty:
        return 0

    k = group_sizes.min()
    return int(k)

def calculate_k_anonymity_from_df_debug(df: pd.DataFrame, quasi_identifiers: list[str]) -> int:
    """
    Рассчитывает k-анонимность с выводом диагностики.
    """
    # Проверяем наличие столбцов
    missing = [col for col in quasi_identifiers if col not in df.columns]
    if missing:
        raise ValueError(f"Отсутствуют колонки: {missing}")
    
    if df.empty:
        print("DataFrame пустой")
        return 0
    
    # Показываем первые несколько строк для диагностики
    print("Первые 5 строк DataFrame:")
    print(df.head())
    
    # Группировка
    group_sizes = df.groupby(quasi_identifiers, observed=True).size()
    
    # Показываем все группы и их размеры
    print("\nРазмеры групп по квази-идентификаторам:")
    print(group_sizes)
    
    if group_sizes.empty:
        print("После группировки нет групп!")
        return 0
    
    k = group_sizes.min()
    
    print(f"\nМинимальный размер группы (k-анонимность): {k}")
    
    return int(k)


def worst_k_anonymity_groups(df: pd.DataFrame, quasi_identifiers: list[str], n: int = 5) -> pd.DataFrame:
    """
    Возвращает n групп с минимальным размером (наименее защищенные группы) для оценки k-анонимности.
    
    :param df: pandas DataFrame
    :param quasi_identifiers: список квази-идентификаторов
    :param n: количество худших групп для отображения
    :return: DataFrame с комбинациями квази-идентификаторов и размером группы
    """
    missing = [col for col in quasi_identifiers if col not in df.columns]
    if missing:
        raise ValueError(f"Отсутствуют колонки: {missing}")

    if df.empty:
        return pd.DataFrame(columns=quasi_identifiers + ["group_size"])

    # Приводим категориальные к строке
    for col in quasi_identifiers:
        if pd.api.types.is_categorical_dtype(df[col]):
            df[col] = df[col].astype(str)

    # Группировка по квази-идентификаторам
    group_sizes = df.groupby(quasi_identifiers, observed=True).size().reset_index(name="group_size")

    # Сортируем по размеру группы, по возрастанию
    group_sizes_sorted = group_sizes.sort_values(by="group_size", ascending=True)

    # Берем n худших групп
    return group_sizes_sorted.head(n)

def copy_and_save_current_state(data: pd.DataFrame) -> pd.DataFrame:
    copy = data.copy()
    save_current_state(copy, "files/dataset_5k_copy.xlsx")
    return copy

def delete_columns(data: pd.DataFrame, columns: list) -> pd.DataFrame:
    return data.drop(columns=columns, axis=1)